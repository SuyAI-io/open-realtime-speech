{"ast":null,"code":"var _jsxFileName = \"/home/lenovo/Documentos/KaiGTP/openai-realtime-rag/src/pages/ConsolePage.tsx\",\n  _s = $RefreshSig$();\n/**\n * Running a local relay server will allow you to hide your API key\n * and run custom logic on the server\n *\n * Set the local relay server address to:\n * REACT_APP_LOCAL_RELAY_SERVER_URL=http://localhost:8081\n *\n * This will also require you to set OPENAI_API_KEY= in a `.env` file\n * You can run it with `npm run relay`, in parallel with `npm start`\n */\nconst LOCAL_RELAY_SERVER_URL = process.env.REACT_APP_LOCAL_RELAY_SERVER_URL || '';\nimport { useEffect, useRef, useCallback, useState } from 'react';\nimport { RealtimeClient } from '@openai/realtime-api-beta';\nimport { WavRecorder, WavStreamPlayer } from '../lib/wavtools/index.js';\nimport { instructions } from '../utils/conversation_config.js';\nimport { WavRenderer } from '../utils/wav_renderer';\nimport { X, Edit, Zap, ArrowUp, ArrowDown } from 'react-feather';\nimport { Button } from '../components/button/Button';\nimport { Toggle } from '../components/toggle/Toggle';\nimport './ConsolePage.scss';\n\n/**\n * Type for all event logs\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function ConsolePage() {\n  _s();\n  /**\n   * Ask user for API Key\n   * If we're using the local relay server, we don't need this\n   */\n  const apiKey = LOCAL_RELAY_SERVER_URL ? '' : localStorage.getItem('tmp::voice_api_key') || prompt('OpenAI API Key') || '';\n  if (apiKey !== '') {\n    localStorage.setItem('tmp::voice_api_key', apiKey);\n  }\n  const [queryResults, setQueryResults] = useState([]); // Add this state for storing results\n\n  /**\n   * Instantiate:\n   * - WavRecorder (speech input)\n   * - WavStreamPlayer (speech output)\n   * - RealtimeClient (API client)\n   */\n  const wavRecorderRef = useRef(new WavRecorder({\n    sampleRate: 24000\n  }));\n  const wavStreamPlayerRef = useRef(new WavStreamPlayer({\n    sampleRate: 24000\n  }));\n  const clientRef = useRef(new RealtimeClient(LOCAL_RELAY_SERVER_URL ? {\n    url: LOCAL_RELAY_SERVER_URL\n  } : {\n    apiKey: apiKey,\n    dangerouslyAllowAPIKeyInBrowser: true\n  }));\n\n  /**\n   * References for\n   * - Rendering audio visualization (canvas)\n   * - Autoscrolling event logs\n   * - Timing delta for event log displays\n   */\n  const clientCanvasRef = useRef(null);\n  const serverCanvasRef = useRef(null);\n  const eventsScrollHeightRef = useRef(0);\n  const eventsScrollRef = useRef(null);\n  const startTimeRef = useRef(new Date().toISOString());\n\n  /**\n   * All of our variables for displaying application state\n   * - items are all conversation items (dialog)\n   * - realtimeEvents are event logs, which can be expanded\n   * - memoryKv is for set_memory() function\n   * - coords, marker are for get_weather() function\n   */\n  const [items, setItems] = useState([]);\n  const [realtimeEvents, setRealtimeEvents] = useState([]);\n  const [expandedEvents, setExpandedEvents] = useState({});\n  const [isConnected, setIsConnected] = useState(false);\n  const [canPushToTalk, setCanPushToTalk] = useState(true);\n  const [isRecording, setIsRecording] = useState(false);\n\n  /**\n   * Utility for formatting the timing of logs\n   */\n  const formatTime = useCallback(timestamp => {\n    const startTime = startTimeRef.current;\n    const t0 = new Date(startTime).valueOf();\n    const t1 = new Date(timestamp).valueOf();\n    const delta = t1 - t0;\n    const hs = Math.floor(delta / 10) % 100;\n    const s = Math.floor(delta / 1000) % 60;\n    const m = Math.floor(delta / 60000) % 60;\n    const pad = n => {\n      let s = n + '';\n      while (s.length < 2) {\n        s = '0' + s;\n      }\n      return s;\n    };\n    return `${pad(m)}:${pad(s)}.${pad(hs)}`;\n  }, []);\n\n  /**\n   * When you click the API key\n   */\n  const resetAPIKey = useCallback(() => {\n    const apiKey = prompt('OpenAI API Key');\n    if (apiKey !== null) {\n      localStorage.clear();\n      localStorage.setItem('tmp::voice_api_key', apiKey);\n      window.location.reload();\n    }\n  }, []);\n\n  /**\n   * Connect to conversation:\n   * WavRecorder taks speech input, WavStreamPlayer output, client is API client\n   */\n  const connectConversation = useCallback(async () => {\n    const client = clientRef.current;\n    const wavRecorder = wavRecorderRef.current;\n    const wavStreamPlayer = wavStreamPlayerRef.current;\n\n    // Set state variables\n    startTimeRef.current = new Date().toISOString();\n    setIsConnected(true);\n    setRealtimeEvents([]);\n    setItems(client.conversation.getItems());\n\n    // Connect to microphone\n    await wavRecorder.begin();\n\n    // Connect to audio output\n    await wavStreamPlayer.connect();\n\n    // Connect to realtime API\n    await client.connect();\n    client.sendUserMessageContent([{\n      type: `input_text`,\n      text: `Hello!`\n      // text: `For testing purposes, I want you to list ten car brands. Number each item, e.g. \"one (or whatever number you are one): the item name\".`\n    }]);\n    if (client.getTurnDetectionType() === 'server_vad') {\n      await wavRecorder.record(data => client.appendInputAudio(data.mono));\n    }\n  }, []);\n\n  /**\n   * Disconnect and reset conversation state\n   */\n  const disconnectConversation = useCallback(async () => {\n    setIsConnected(false);\n    setRealtimeEvents([]);\n    setItems([]);\n    const client = clientRef.current;\n    client.disconnect();\n    const wavRecorder = wavRecorderRef.current;\n    await wavRecorder.end();\n    const wavStreamPlayer = wavStreamPlayerRef.current;\n    await wavStreamPlayer.interrupt();\n  }, []);\n  const deleteConversationItem = useCallback(async id => {\n    const client = clientRef.current;\n    client.deleteItem(id);\n  }, []);\n\n  /**\n   * In push-to-talk mode, start recording\n   * .appendInputAudio() for each sample\n   */\n  const startRecording = async () => {\n    setIsRecording(true);\n    const client = clientRef.current;\n    const wavRecorder = wavRecorderRef.current;\n    const wavStreamPlayer = wavStreamPlayerRef.current;\n    const trackSampleOffset = await wavStreamPlayer.interrupt();\n    if (trackSampleOffset !== null && trackSampleOffset !== void 0 && trackSampleOffset.trackId) {\n      const {\n        trackId,\n        offset\n      } = trackSampleOffset;\n      await client.cancelResponse(trackId, offset);\n    }\n    await wavRecorder.record(data => client.appendInputAudio(data.mono));\n  };\n\n  /**\n   * In push-to-talk mode, stop recording\n   */\n  const stopRecording = async () => {\n    setIsRecording(false);\n    const client = clientRef.current;\n    const wavRecorder = wavRecorderRef.current;\n    await wavRecorder.pause();\n    client.createResponse();\n  };\n\n  /**\n   * Switch between Manual <> VAD mode for communication\n   */\n  const changeTurnEndType = async value => {\n    const client = clientRef.current;\n    const wavRecorder = wavRecorderRef.current;\n    if (value === 'none' && wavRecorder.getStatus() === 'recording') {\n      await wavRecorder.pause();\n    }\n    client.updateSession({\n      turn_detection: value === 'none' ? null : {\n        type: 'server_vad'\n      }\n    });\n    if (value === 'server_vad' && client.isConnected()) {\n      await wavRecorder.record(data => client.appendInputAudio(data.mono));\n    }\n    setCanPushToTalk(value === 'none');\n  };\n\n  /**\n   * Auto-scroll the event logs\n   */\n  useEffect(() => {\n    if (eventsScrollRef.current) {\n      const eventsEl = eventsScrollRef.current;\n      const scrollHeight = eventsEl.scrollHeight;\n      // Only scroll if height has just changed\n      if (scrollHeight !== eventsScrollHeightRef.current) {\n        eventsEl.scrollTop = scrollHeight;\n        eventsScrollHeightRef.current = scrollHeight;\n      }\n    }\n  }, [realtimeEvents]);\n\n  /**\n   * Auto-scroll the conversation logs\n   */\n  useEffect(() => {\n    const conversationEls = [].slice.call(document.body.querySelectorAll('[data-conversation-content]'));\n    for (const el of conversationEls) {\n      const conversationEl = el;\n      conversationEl.scrollTop = conversationEl.scrollHeight;\n    }\n  }, [items]);\n  useEffect(() => {\n    // This effect will run whenever queryResults changes\n    console.log('Query results updated:', queryResults);\n  }, [queryResults]);\n\n  /**\n   * Set up render loops for the visualization canvas\n   */\n  useEffect(() => {\n    let isLoaded = true;\n    const wavRecorder = wavRecorderRef.current;\n    const clientCanvas = clientCanvasRef.current;\n    let clientCtx = null;\n    const wavStreamPlayer = wavStreamPlayerRef.current;\n    const serverCanvas = serverCanvasRef.current;\n    let serverCtx = null;\n    const render = () => {\n      if (isLoaded) {\n        if (clientCanvas) {\n          if (!clientCanvas.width || !clientCanvas.height) {\n            clientCanvas.width = clientCanvas.offsetWidth;\n            clientCanvas.height = clientCanvas.offsetHeight;\n          }\n          clientCtx = clientCtx || clientCanvas.getContext('2d');\n          if (clientCtx) {\n            clientCtx.clearRect(0, 0, clientCanvas.width, clientCanvas.height);\n            const result = wavRecorder.recording ? wavRecorder.getFrequencies('voice') : {\n              values: new Float32Array([0])\n            };\n            WavRenderer.drawBars(clientCanvas, clientCtx, result.values, '#0099ff', 10, 0, 8);\n          }\n        }\n        if (serverCanvas) {\n          if (!serverCanvas.width || !serverCanvas.height) {\n            serverCanvas.width = serverCanvas.offsetWidth;\n            serverCanvas.height = serverCanvas.offsetHeight;\n          }\n          serverCtx = serverCtx || serverCanvas.getContext('2d');\n          if (serverCtx) {\n            serverCtx.clearRect(0, 0, serverCanvas.width, serverCanvas.height);\n            const result = wavStreamPlayer.analyser ? wavStreamPlayer.getFrequencies('voice') : {\n              values: new Float32Array([0])\n            };\n            WavRenderer.drawBars(serverCanvas, serverCtx, result.values, '#009900', 10, 0, 8);\n          }\n        }\n        window.requestAnimationFrame(render);\n      }\n    };\n    render();\n    return () => {\n      isLoaded = false;\n    };\n  }, []);\n\n  /**\n   * Core RealtimeClient and audio capture setup\n   * Set all of our instructions, tools, events and more\n   */\n  useEffect(() => {\n    // Get refs\n    const wavStreamPlayer = wavStreamPlayerRef.current;\n    const client = clientRef.current;\n\n    // Set instructions\n    client.updateSession({\n      instructions: instructions\n    });\n    client.updateSession({\n      voice: 'echo'\n    });\n    // Set transcription, otherwise we don't get user transcriptions back\n    client.updateSession({\n      input_audio_transcription: {\n        model: 'whisper-1'\n      }\n    });\n\n    // Add tools\n\n    // handle realtime events from client + server for event logging\n    client.on('realtime.event', realtimeEvent => {\n      setRealtimeEvents(realtimeEvents => {\n        const lastEvent = realtimeEvents[realtimeEvents.length - 1];\n        if ((lastEvent === null || lastEvent === void 0 ? void 0 : lastEvent.event.type) === realtimeEvent.event.type) {\n          // if we receive multiple events in a row, aggregate them for display purposes\n          lastEvent.count = (lastEvent.count || 0) + 1;\n          return realtimeEvents.slice(0, -1).concat(lastEvent);\n        } else {\n          return realtimeEvents.concat(realtimeEvent);\n        }\n      });\n    });\n    client.on('error', event => console.error(event));\n    client.on('conversation.interrupted', async () => {\n      const trackSampleOffset = await wavStreamPlayer.interrupt();\n      if (trackSampleOffset !== null && trackSampleOffset !== void 0 && trackSampleOffset.trackId) {\n        const {\n          trackId,\n          offset\n        } = trackSampleOffset;\n        await client.cancelResponse(trackId, offset);\n      }\n    });\n    client.on('conversation.updated', async ({\n      item,\n      delta\n    }) => {\n      var _item$formatted$audio;\n      const items = client.conversation.getItems();\n      if (delta !== null && delta !== void 0 && delta.audio) {\n        wavStreamPlayer.add16BitPCM(delta.audio, item.id);\n      }\n      if (item.status === 'completed' && (_item$formatted$audio = item.formatted.audio) !== null && _item$formatted$audio !== void 0 && _item$formatted$audio.length) {\n        const wavFile = await WavRecorder.decode(item.formatted.audio, 24000, 24000);\n        item.formatted.file = wavFile;\n      }\n      setItems(items);\n    });\n    setItems(client.conversation.getItems());\n    return () => {\n      // cleanup; resets to defaults\n      client.reset();\n    };\n  }, []);\n\n  /**\n   * Render the application\n   */\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    \"data-component\": \"ConsolePage\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-top\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-title\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"/openai-logomark.svg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Realtime RAG Assistant - Prepared By Adam Lucek\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-api-key\",\n        children: !LOCAL_RELAY_SERVER_URL && /*#__PURE__*/_jsxDEV(Button, {\n          icon: Edit,\n          iconPosition: \"end\",\n          buttonStyle: \"flush\",\n          label: `api key: ${apiKey.slice(0, 3)}...`,\n          onClick: () => resetAPIKey()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-logs\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content-block events\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"visualization\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"visualization-entry client\",\n              children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n                ref: clientCanvasRef\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 436,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 435,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"visualization-entry server\",\n              children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n                ref: serverCanvasRef\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 439,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 438,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 434,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"content-block-title\",\n            children: \"events\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 442,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"content-block-body\",\n            ref: eventsScrollRef,\n            children: [!realtimeEvents.length && `awaiting connection...`, realtimeEvents.map((realtimeEvent, i) => {\n              const count = realtimeEvent.count;\n              const event = {\n                ...realtimeEvent.event\n              };\n              if (event.type === 'input_audio_buffer.append') {\n                event.audio = `[trimmed: ${event.audio.length} bytes]`;\n              } else if (event.type === 'response.audio.delta') {\n                event.delta = `[trimmed: ${event.delta.length} bytes]`;\n              }\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"event\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"event-timestamp\",\n                  children: formatTime(realtimeEvent.time)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 455,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"event-details\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"event-summary\",\n                    onClick: () => {\n                      // toggle event details\n                      const id = event.event_id;\n                      const expanded = {\n                        ...expandedEvents\n                      };\n                      if (expanded[id]) {\n                        delete expanded[id];\n                      } else {\n                        expanded[id] = true;\n                      }\n                      setExpandedEvents(expanded);\n                    },\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: `event-source ${event.type === 'error' ? 'error' : realtimeEvent.source}`,\n                      children: [realtimeEvent.source === 'client' ? /*#__PURE__*/_jsxDEV(ArrowUp, {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 481,\n                        columnNumber: 29\n                      }, this) : /*#__PURE__*/_jsxDEV(ArrowDown, {}, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 483,\n                        columnNumber: 29\n                      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                        children: event.type === 'error' ? 'error!' : realtimeEvent.source\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 485,\n                        columnNumber: 27\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 473,\n                      columnNumber: 25\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"event-type\",\n                      children: [event.type, count && ` (${count})`]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 491,\n                      columnNumber: 25\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 459,\n                    columnNumber: 23\n                  }, this), !!expandedEvents[event.event_id] && /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"event-payload\",\n                    children: JSON.stringify(event, null, 2)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 497,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 458,\n                  columnNumber: 21\n                }, this)]\n              }, event.event_id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 454,\n                columnNumber: 19\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 443,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 433,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content-block conversation\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"content-block-title\",\n            children: \"conversation\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 508,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"content-block-body\",\n            \"data-conversation-content\": true,\n            children: [!items.length && `awaiting connection...`, items.map((conversationItem, i) => {\n              var _conversationItem$for;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"conversation-item\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `speaker ${conversationItem.role || ''}`,\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    children: (conversationItem.role || conversationItem.type).replaceAll('_', ' ')\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 515,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"close\",\n                    onClick: () => deleteConversationItem(conversationItem.id),\n                    children: /*#__PURE__*/_jsxDEV(X, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 526,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 520,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 514,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `speaker-content`,\n                  children: [conversationItem.type === 'function_call_output' && /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: conversationItem.formatted.output\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 532,\n                    columnNumber: 25\n                  }, this), !!conversationItem.formatted.tool && /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [conversationItem.formatted.tool.name, \"(\", conversationItem.formatted.tool.arguments, \")\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 536,\n                    columnNumber: 25\n                  }, this), !conversationItem.formatted.tool && conversationItem.role === 'user' && /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: conversationItem.formatted.transcript || ((_conversationItem$for = conversationItem.formatted.audio) !== null && _conversationItem$for !== void 0 && _conversationItem$for.length ? '(awaiting transcript)' : conversationItem.formatted.text || '(item sent)')\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 543,\n                    columnNumber: 27\n                  }, this), !conversationItem.formatted.tool && conversationItem.role === 'assistant' && /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: conversationItem.formatted.transcript || conversationItem.formatted.text || '(truncated)'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 553,\n                    columnNumber: 27\n                  }, this), conversationItem.formatted.file && /*#__PURE__*/_jsxDEV(\"audio\", {\n                    src: conversationItem.formatted.file.url,\n                    controls: true\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 560,\n                    columnNumber: 25\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 529,\n                  columnNumber: 21\n                }, this)]\n              }, conversationItem.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 513,\n                columnNumber: 19\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 509,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 507,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content-actions\",\n          children: [/*#__PURE__*/_jsxDEV(Toggle, {\n            defaultValue: false,\n            labels: ['manual', 'vad'],\n            values: ['none', 'server_vad'],\n            onChange: (_, value) => changeTurnEndType(value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 572,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"spacer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 578,\n            columnNumber: 13\n          }, this), isConnected && canPushToTalk && /*#__PURE__*/_jsxDEV(Button, {\n            label: isRecording ? 'release to send' : 'push to talk',\n            buttonStyle: isRecording ? 'alert' : 'regular',\n            disabled: !isConnected || !canPushToTalk,\n            onMouseDown: startRecording,\n            onMouseUp: stopRecording\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 580,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"spacer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 588,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            label: isConnected ? 'disconnect' : 'connect',\n            iconPosition: isConnected ? 'end' : 'start',\n            icon: isConnected ? X : Zap,\n            buttonStyle: isConnected ? 'regular' : 'action',\n            onClick: isConnected ? disconnectConversation : connectConversation\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 589,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 571,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-right\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content-block map\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"content-block-body full\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"sidebar\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Retrieved Documents\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 604,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"sidebar-content\",\n                children: queryResults.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n                  children: queryResults.map((result, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                    children: result\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 609,\n                    columnNumber: 25\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 607,\n                  columnNumber: 21\n                }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"No results yet. Results retrieved from Voice Assistant will show up here.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 613,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 605,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 603,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 602,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 601,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 600,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 431,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 413,\n    columnNumber: 5\n  }, this);\n}\n_s(ConsolePage, \"f9h4GMTEW+nzBgZ0AwHvW5KOXT4=\");\n_c = ConsolePage;\nvar _c;\n$RefreshReg$(_c, \"ConsolePage\");","map":{"version":3,"names":["LOCAL_RELAY_SERVER_URL","process","env","REACT_APP_LOCAL_RELAY_SERVER_URL","useEffect","useRef","useCallback","useState","RealtimeClient","WavRecorder","WavStreamPlayer","instructions","WavRenderer","X","Edit","Zap","ArrowUp","ArrowDown","Button","Toggle","jsxDEV","_jsxDEV","ConsolePage","_s","apiKey","localStorage","getItem","prompt","setItem","queryResults","setQueryResults","wavRecorderRef","sampleRate","wavStreamPlayerRef","clientRef","url","dangerouslyAllowAPIKeyInBrowser","clientCanvasRef","serverCanvasRef","eventsScrollHeightRef","eventsScrollRef","startTimeRef","Date","toISOString","items","setItems","realtimeEvents","setRealtimeEvents","expandedEvents","setExpandedEvents","isConnected","setIsConnected","canPushToTalk","setCanPushToTalk","isRecording","setIsRecording","formatTime","timestamp","startTime","current","t0","valueOf","t1","delta","hs","Math","floor","s","m","pad","n","length","resetAPIKey","clear","window","location","reload","connectConversation","client","wavRecorder","wavStreamPlayer","conversation","getItems","begin","connect","sendUserMessageContent","type","text","getTurnDetectionType","record","data","appendInputAudio","mono","disconnectConversation","disconnect","end","interrupt","deleteConversationItem","id","deleteItem","startRecording","trackSampleOffset","trackId","offset","cancelResponse","stopRecording","pause","createResponse","changeTurnEndType","value","getStatus","updateSession","turn_detection","eventsEl","scrollHeight","scrollTop","conversationEls","slice","call","document","body","querySelectorAll","el","conversationEl","console","log","isLoaded","clientCanvas","clientCtx","serverCanvas","serverCtx","render","width","height","offsetWidth","offsetHeight","getContext","clearRect","result","recording","getFrequencies","values","Float32Array","drawBars","analyser","requestAnimationFrame","voice","input_audio_transcription","model","on","realtimeEvent","lastEvent","event","count","concat","error","item","_item$formatted$audio","audio","add16BitPCM","status","formatted","wavFile","decode","file","reset","children","className","src","fileName","_jsxFileName","lineNumber","columnNumber","icon","iconPosition","buttonStyle","label","onClick","ref","map","i","time","event_id","expanded","source","JSON","stringify","conversationItem","_conversationItem$for","role","replaceAll","output","tool","name","arguments","transcript","controls","defaultValue","labels","onChange","_","disabled","onMouseDown","onMouseUp","index","_c","$RefreshReg$"],"sources":["/home/lenovo/Documentos/KaiGTP/openai-realtime-rag/src/pages/ConsolePage.tsx"],"sourcesContent":["/**\n * Running a local relay server will allow you to hide your API key\n * and run custom logic on the server\n *\n * Set the local relay server address to:\n * REACT_APP_LOCAL_RELAY_SERVER_URL=http://localhost:8081\n *\n * This will also require you to set OPENAI_API_KEY= in a `.env` file\n * You can run it with `npm run relay`, in parallel with `npm start`\n */\nconst LOCAL_RELAY_SERVER_URL: string =\n  process.env.REACT_APP_LOCAL_RELAY_SERVER_URL || '';\n\nimport { useEffect, useRef, useCallback, useState } from 'react';\n\nimport { RealtimeClient } from '@openai/realtime-api-beta';\nimport { ItemType } from '@openai/realtime-api-beta/dist/lib/client.js';\nimport { WavRecorder, WavStreamPlayer } from '../lib/wavtools/index.js';\nimport { instructions } from '../utils/conversation_config.js';\nimport { WavRenderer } from '../utils/wav_renderer';\n\nimport { X, Edit, Zap, ArrowUp, ArrowDown } from 'react-feather';\nimport { Button } from '../components/button/Button';\nimport { Toggle } from '../components/toggle/Toggle';\n\nimport './ConsolePage.scss';\n\n/**\n * Type for all event logs\n */\ninterface RealtimeEvent {\n  time: string;\n  source: 'client' | 'server';\n  count?: number;\n  event: { [key: string]: any };\n}\n\nexport function ConsolePage() {\n  /**\n   * Ask user for API Key\n   * If we're using the local relay server, we don't need this\n   */\n  const apiKey = LOCAL_RELAY_SERVER_URL\n    ? ''\n    : localStorage.getItem('tmp::voice_api_key') ||\n      prompt('OpenAI API Key') ||\n      '';\n  if (apiKey !== '') {\n    localStorage.setItem('tmp::voice_api_key', apiKey);\n  }\n\n  const [queryResults, setQueryResults] = useState<string[]>([]);  // Add this state for storing results\n  \n  /**\n   * Instantiate:\n   * - WavRecorder (speech input)\n   * - WavStreamPlayer (speech output)\n   * - RealtimeClient (API client)\n   */\n  const wavRecorderRef = useRef<WavRecorder>(\n    new WavRecorder({ sampleRate: 24000 })\n  );\n  const wavStreamPlayerRef = useRef<WavStreamPlayer>(\n    new WavStreamPlayer({ sampleRate: 24000 })\n  );\n  const clientRef = useRef<RealtimeClient>(\n    new RealtimeClient(\n      LOCAL_RELAY_SERVER_URL\n        ? { url: LOCAL_RELAY_SERVER_URL }\n        : {\n            apiKey: apiKey,\n            dangerouslyAllowAPIKeyInBrowser: true,\n          }\n    )\n  );\n\n  /**\n   * References for\n   * - Rendering audio visualization (canvas)\n   * - Autoscrolling event logs\n   * - Timing delta for event log displays\n   */\n  const clientCanvasRef = useRef<HTMLCanvasElement>(null);\n  const serverCanvasRef = useRef<HTMLCanvasElement>(null);\n  const eventsScrollHeightRef = useRef(0);\n  const eventsScrollRef = useRef<HTMLDivElement>(null);\n  const startTimeRef = useRef<string>(new Date().toISOString());\n\n  /**\n   * All of our variables for displaying application state\n   * - items are all conversation items (dialog)\n   * - realtimeEvents are event logs, which can be expanded\n   * - memoryKv is for set_memory() function\n   * - coords, marker are for get_weather() function\n   */\n  const [items, setItems] = useState<ItemType[]>([]);\n  const [realtimeEvents, setRealtimeEvents] = useState<RealtimeEvent[]>([]);\n  const [expandedEvents, setExpandedEvents] = useState<{\n    [key: string]: boolean;\n  }>({});\n  const [isConnected, setIsConnected] = useState(false);\n  const [canPushToTalk, setCanPushToTalk] = useState(true);\n  const [isRecording, setIsRecording] = useState(false);\n\n  /**\n   * Utility for formatting the timing of logs\n   */\n  const formatTime = useCallback((timestamp: string) => {\n    const startTime = startTimeRef.current;\n    const t0 = new Date(startTime).valueOf();\n    const t1 = new Date(timestamp).valueOf();\n    const delta = t1 - t0;\n    const hs = Math.floor(delta / 10) % 100;\n    const s = Math.floor(delta / 1000) % 60;\n    const m = Math.floor(delta / 60_000) % 60;\n    const pad = (n: number) => {\n      let s = n + '';\n      while (s.length < 2) {\n        s = '0' + s;\n      }\n      return s;\n    };\n    return `${pad(m)}:${pad(s)}.${pad(hs)}`;\n  }, []);\n\n  /**\n   * When you click the API key\n   */\n  const resetAPIKey = useCallback(() => {\n    const apiKey = prompt('OpenAI API Key');\n    if (apiKey !== null) {\n      localStorage.clear();\n      localStorage.setItem('tmp::voice_api_key', apiKey);\n      window.location.reload();\n    }\n  }, []);\n\n  /**\n   * Connect to conversation:\n   * WavRecorder taks speech input, WavStreamPlayer output, client is API client\n   */\n  const connectConversation = useCallback(async () => {\n    const client = clientRef.current;\n    const wavRecorder = wavRecorderRef.current;\n    const wavStreamPlayer = wavStreamPlayerRef.current;\n\n    // Set state variables\n    startTimeRef.current = new Date().toISOString();\n    setIsConnected(true);\n    setRealtimeEvents([]);\n    setItems(client.conversation.getItems());\n\n    // Connect to microphone\n    await wavRecorder.begin();\n\n    // Connect to audio output\n    await wavStreamPlayer.connect();\n\n    // Connect to realtime API\n    await client.connect();\n    client.sendUserMessageContent([\n      {\n        type: `input_text`,\n        text: `Hello!`,\n        // text: `For testing purposes, I want you to list ten car brands. Number each item, e.g. \"one (or whatever number you are one): the item name\".`\n      },\n    ]);\n\n    if (client.getTurnDetectionType() === 'server_vad') {\n      await wavRecorder.record((data) => client.appendInputAudio(data.mono));\n    }\n  }, []);\n\n  /**\n   * Disconnect and reset conversation state\n   */\n  const disconnectConversation = useCallback(async () => {\n    setIsConnected(false);\n    setRealtimeEvents([]);\n    setItems([]);\n\n    const client = clientRef.current;\n    client.disconnect();\n\n    const wavRecorder = wavRecorderRef.current;\n    await wavRecorder.end();\n\n    const wavStreamPlayer = wavStreamPlayerRef.current;\n    await wavStreamPlayer.interrupt();\n  }, []);\n\n  const deleteConversationItem = useCallback(async (id: string) => {\n    const client = clientRef.current;\n    client.deleteItem(id);\n  }, []);\n\n  /**\n   * In push-to-talk mode, start recording\n   * .appendInputAudio() for each sample\n   */\n  const startRecording = async () => {\n    setIsRecording(true);\n    const client = clientRef.current;\n    const wavRecorder = wavRecorderRef.current;\n    const wavStreamPlayer = wavStreamPlayerRef.current;\n    const trackSampleOffset = await wavStreamPlayer.interrupt();\n    if (trackSampleOffset?.trackId) {\n      const { trackId, offset } = trackSampleOffset;\n      await client.cancelResponse(trackId, offset);\n    }\n    await wavRecorder.record((data) => client.appendInputAudio(data.mono));\n  };\n\n  /**\n   * In push-to-talk mode, stop recording\n   */\n  const stopRecording = async () => {\n    setIsRecording(false);\n    const client = clientRef.current;\n    const wavRecorder = wavRecorderRef.current;\n    await wavRecorder.pause();\n    client.createResponse();\n  };\n\n  /**\n   * Switch between Manual <> VAD mode for communication\n   */\n  const changeTurnEndType = async (value: string) => {\n    const client = clientRef.current;\n    const wavRecorder = wavRecorderRef.current;\n    if (value === 'none' && wavRecorder.getStatus() === 'recording') {\n      await wavRecorder.pause();\n    }\n    client.updateSession({\n      turn_detection: value === 'none' ? null : { type: 'server_vad' },\n    });\n    if (value === 'server_vad' && client.isConnected()) {\n      await wavRecorder.record((data) => client.appendInputAudio(data.mono));\n    }\n    setCanPushToTalk(value === 'none');\n  };\n\n  /**\n   * Auto-scroll the event logs\n   */\n  useEffect(() => {\n    if (eventsScrollRef.current) {\n      const eventsEl = eventsScrollRef.current;\n      const scrollHeight = eventsEl.scrollHeight;\n      // Only scroll if height has just changed\n      if (scrollHeight !== eventsScrollHeightRef.current) {\n        eventsEl.scrollTop = scrollHeight;\n        eventsScrollHeightRef.current = scrollHeight;\n      }\n    }\n  }, [realtimeEvents]);\n\n  /**\n   * Auto-scroll the conversation logs\n   */\n  useEffect(() => {\n    const conversationEls = [].slice.call(\n      document.body.querySelectorAll('[data-conversation-content]')\n    );\n    for (const el of conversationEls) {\n      const conversationEl = el as HTMLDivElement;\n      conversationEl.scrollTop = conversationEl.scrollHeight;\n    }\n  }, [items]);\n\n  useEffect(() => {\n    // This effect will run whenever queryResults changes\n    console.log('Query results updated:', queryResults);\n  }, [queryResults]);\n\n  /**\n   * Set up render loops for the visualization canvas\n   */\n  useEffect(() => {\n    let isLoaded = true;\n\n    const wavRecorder = wavRecorderRef.current;\n    const clientCanvas = clientCanvasRef.current;\n    let clientCtx: CanvasRenderingContext2D | null = null;\n\n    const wavStreamPlayer = wavStreamPlayerRef.current;\n    const serverCanvas = serverCanvasRef.current;\n    let serverCtx: CanvasRenderingContext2D | null = null;\n\n    const render = () => {\n      if (isLoaded) {\n        if (clientCanvas) {\n          if (!clientCanvas.width || !clientCanvas.height) {\n            clientCanvas.width = clientCanvas.offsetWidth;\n            clientCanvas.height = clientCanvas.offsetHeight;\n          }\n          clientCtx = clientCtx || clientCanvas.getContext('2d');\n          if (clientCtx) {\n            clientCtx.clearRect(0, 0, clientCanvas.width, clientCanvas.height);\n            const result = wavRecorder.recording\n              ? wavRecorder.getFrequencies('voice')\n              : { values: new Float32Array([0]) };\n            WavRenderer.drawBars(\n              clientCanvas,\n              clientCtx,\n              result.values,\n              '#0099ff',\n              10,\n              0,\n              8\n            );\n          }\n        }\n        if (serverCanvas) {\n          if (!serverCanvas.width || !serverCanvas.height) {\n            serverCanvas.width = serverCanvas.offsetWidth;\n            serverCanvas.height = serverCanvas.offsetHeight;\n          }\n          serverCtx = serverCtx || serverCanvas.getContext('2d');\n          if (serverCtx) {\n            serverCtx.clearRect(0, 0, serverCanvas.width, serverCanvas.height);\n            const result = wavStreamPlayer.analyser\n              ? wavStreamPlayer.getFrequencies('voice')\n              : { values: new Float32Array([0]) };\n            WavRenderer.drawBars(\n              serverCanvas,\n              serverCtx,\n              result.values,\n              '#009900',\n              10,\n              0,\n              8\n            );\n          }\n        }\n        window.requestAnimationFrame(render);\n      }\n    };\n    render();\n\n    return () => {\n      isLoaded = false;\n    };\n  }, []);\n\n  /**\n   * Core RealtimeClient and audio capture setup\n   * Set all of our instructions, tools, events and more\n   */\n  useEffect(() => {\n    // Get refs\n    const wavStreamPlayer = wavStreamPlayerRef.current;\n    const client = clientRef.current;\n\n    // Set instructions\n    client.updateSession({ instructions: instructions });\n    client.updateSession({ voice: 'echo'})\n    // Set transcription, otherwise we don't get user transcriptions back\n    client.updateSession({ input_audio_transcription: { model: 'whisper-1' } });\n\n    // Add tools\n    \n\n    // handle realtime events from client + server for event logging\n    client.on('realtime.event', (realtimeEvent: RealtimeEvent) => {\n      setRealtimeEvents((realtimeEvents) => {\n        const lastEvent = realtimeEvents[realtimeEvents.length - 1];\n        if (lastEvent?.event.type === realtimeEvent.event.type) {\n          // if we receive multiple events in a row, aggregate them for display purposes\n          lastEvent.count = (lastEvent.count || 0) + 1;\n          return realtimeEvents.slice(0, -1).concat(lastEvent);\n        } else {\n          return realtimeEvents.concat(realtimeEvent);\n        }\n      });\n    });\n    client.on('error', (event: any) => console.error(event));\n    client.on('conversation.interrupted', async () => {\n      const trackSampleOffset = await wavStreamPlayer.interrupt();\n      if (trackSampleOffset?.trackId) {\n        const { trackId, offset } = trackSampleOffset;\n        await client.cancelResponse(trackId, offset);\n      }\n    });\n    client.on('conversation.updated', async ({ item, delta }: any) => {\n      const items = client.conversation.getItems();\n      if (delta?.audio) {\n        wavStreamPlayer.add16BitPCM(delta.audio, item.id);\n      }\n      if (item.status === 'completed' && item.formatted.audio?.length) {\n        const wavFile = await WavRecorder.decode(\n          item.formatted.audio,\n          24000,\n          24000\n        );\n        item.formatted.file = wavFile;\n      }\n      setItems(items);\n    });\n\n    setItems(client.conversation.getItems());\n\n    return () => {\n      // cleanup; resets to defaults\n      client.reset();\n    };\n  }, []);\n\n  /**\n   * Render the application\n   */\n  return (\n    <div data-component=\"ConsolePage\">\n      <div className=\"content-top\">\n        <div className=\"content-title\">\n          <img src=\"/openai-logomark.svg\" />\n          <span>Realtime RAG Assistant - Prepared By Adam Lucek</span>\n        </div>\n        <div className=\"content-api-key\">\n          {!LOCAL_RELAY_SERVER_URL && (\n            <Button\n              icon={Edit}\n              iconPosition=\"end\"\n              buttonStyle=\"flush\"\n              label={`api key: ${apiKey.slice(0, 3)}...`}\n              onClick={() => resetAPIKey()}\n            />\n          )}\n        </div>\n      </div>\n      <div className=\"content-main\">\n        <div className=\"content-logs\">\n          <div className=\"content-block events\">\n            <div className=\"visualization\">\n              <div className=\"visualization-entry client\">\n                <canvas ref={clientCanvasRef} />\n              </div>\n              <div className=\"visualization-entry server\">\n                <canvas ref={serverCanvasRef} />\n              </div>\n            </div>\n            <div className=\"content-block-title\">events</div>\n            <div className=\"content-block-body\" ref={eventsScrollRef}>\n              {!realtimeEvents.length && `awaiting connection...`}\n              {realtimeEvents.map((realtimeEvent, i) => {\n                const count = realtimeEvent.count;\n                const event = { ...realtimeEvent.event };\n                if (event.type === 'input_audio_buffer.append') {\n                  event.audio = `[trimmed: ${event.audio.length} bytes]`;\n                } else if (event.type === 'response.audio.delta') {\n                  event.delta = `[trimmed: ${event.delta.length} bytes]`;\n                }\n                return (\n                  <div className=\"event\" key={event.event_id}>\n                    <div className=\"event-timestamp\">\n                      {formatTime(realtimeEvent.time)}\n                    </div>\n                    <div className=\"event-details\">\n                      <div\n                        className=\"event-summary\"\n                        onClick={() => {\n                          // toggle event details\n                          const id = event.event_id;\n                          const expanded = { ...expandedEvents };\n                          if (expanded[id]) {\n                            delete expanded[id];\n                          } else {\n                            expanded[id] = true;\n                          }\n                          setExpandedEvents(expanded);\n                        }}\n                      >\n                        <div\n                          className={`event-source ${\n                            event.type === 'error'\n                              ? 'error'\n                              : realtimeEvent.source\n                          }`}\n                        >\n                          {realtimeEvent.source === 'client' ? (\n                            <ArrowUp />\n                          ) : (\n                            <ArrowDown />\n                          )}\n                          <span>\n                            {event.type === 'error'\n                              ? 'error!'\n                              : realtimeEvent.source}\n                          </span>\n                        </div>\n                        <div className=\"event-type\">\n                          {event.type}\n                          {count && ` (${count})`}\n                        </div>\n                      </div>\n                      {!!expandedEvents[event.event_id] && (\n                        <div className=\"event-payload\">\n                          {JSON.stringify(event, null, 2)}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n          <div className=\"content-block conversation\">\n            <div className=\"content-block-title\">conversation</div>\n            <div className=\"content-block-body\" data-conversation-content>\n              {!items.length && `awaiting connection...`}\n              {items.map((conversationItem, i) => {\n                return (\n                  <div className=\"conversation-item\" key={conversationItem.id}>\n                    <div className={`speaker ${conversationItem.role || ''}`}>\n                      <div>\n                        {(\n                          conversationItem.role || conversationItem.type\n                        ).replaceAll('_', ' ')}\n                      </div>\n                      <div\n                        className=\"close\"\n                        onClick={() =>\n                          deleteConversationItem(conversationItem.id)\n                        }\n                      >\n                        <X />\n                      </div>\n                    </div>\n                    <div className={`speaker-content`}>\n                      {/* tool response */}\n                      {conversationItem.type === 'function_call_output' && (\n                        <div>{conversationItem.formatted.output}</div>\n                      )}\n                      {/* tool call */}\n                      {!!conversationItem.formatted.tool && (\n                        <div>\n                          {conversationItem.formatted.tool.name}(\n                          {conversationItem.formatted.tool.arguments})\n                        </div>\n                      )}\n                      {!conversationItem.formatted.tool &&\n                        conversationItem.role === 'user' && (\n                          <div>\n                            {conversationItem.formatted.transcript ||\n                              (conversationItem.formatted.audio?.length\n                                ? '(awaiting transcript)'\n                                : conversationItem.formatted.text ||\n                                  '(item sent)')}\n                          </div>\n                        )}\n                      {!conversationItem.formatted.tool &&\n                        conversationItem.role === 'assistant' && (\n                          <div>\n                            {conversationItem.formatted.transcript ||\n                              conversationItem.formatted.text ||\n                              '(truncated)'}\n                          </div>\n                        )}\n                      {conversationItem.formatted.file && (\n                        <audio\n                          src={conversationItem.formatted.file.url}\n                          controls\n                        />\n                      )}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n          <div className=\"content-actions\">\n            <Toggle\n              defaultValue={false}\n              labels={['manual', 'vad']}\n              values={['none', 'server_vad']}\n              onChange={(_, value) => changeTurnEndType(value)}\n            />\n            <div className=\"spacer\" />\n            {isConnected && canPushToTalk && (\n              <Button\n                label={isRecording ? 'release to send' : 'push to talk'}\n                buttonStyle={isRecording ? 'alert' : 'regular'}\n                disabled={!isConnected || !canPushToTalk}\n                onMouseDown={startRecording}\n                onMouseUp={stopRecording}\n              />\n            )}\n            <div className=\"spacer\" />\n            <Button\n              label={isConnected ? 'disconnect' : 'connect'}\n              iconPosition={isConnected ? 'end' : 'start'}\n              icon={isConnected ? X : Zap}\n              buttonStyle={isConnected ? 'regular' : 'action'}\n              onClick={\n                isConnected ? disconnectConversation : connectConversation\n              }\n            />\n          </div>\n        </div>\n        <div className=\"content-right\">\n          <div className=\"content-block map\">\n            <div className=\"content-block-body full\">\n              <div className=\"sidebar\">\n                <h3>Retrieved Documents</h3>\n                <div className=\"sidebar-content\">\n                  {queryResults.length > 0 ? (\n                    <ul>\n                      {queryResults.map((result, index) => (\n                        <li key={index}>{result}</li>\n                      ))}\n                    </ul>\n                  ) : (\n                    <p>No results yet. Results retrieved from Voice Assistant will show up here.</p>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}